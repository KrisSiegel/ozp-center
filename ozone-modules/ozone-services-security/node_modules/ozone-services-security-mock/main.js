(function () {
    "use strict";
    var constants = require('../../config/constants');

    module.exports = function (Ozone) {
        Ozone.Service("Security", {
            getMiddleware: function () {
                return function(req, res, next) {
                    Ozone.logger.info("Mock Security -> Inpecting route");
                    if (Ozone.utils.safe(req, "session.user") === undefined) {
                        var autoLogin = Ozone.config().getServerProperty("security.mock.autoLogin");
                        if (!Ozone.utils.isUndefinedOrNull(autoLogin)) {
                            Ozone.Service("Personas").persona.login({
                                username: autoLogin,
                                auth_token: autoLogin,
                                auth_service: "Mock",
                                ensure: true,
                                overriding_role: Ozone.config().getServerProperty("security.mock.overriding_role"),
                                overriding_favorites: Ozone.config().getServerProperty("security.mock.favoriteApps"),
                                overriding_recent_launches: Ozone.config().getServerProperty("security.mock.recentApps"),
                                success: function (persona) {
                                    next();
                                },
                                error: function (err) {
                                    next();
                                }
                            }, req, res);
                        } else {
                            next();
                        }
                    } else {
                        next();
                    }
                }
            }
        });
        Ozone.Service().on("ready", "ApplicationEngine", function () {
            Ozone.Service("ApplicationEngine").use(Ozone.Service("Security").getMiddleware());
        });
        
        Ozone.Service().on("ready", "Personas", function () {
            require("./routes/index.js")(Ozone);
        });
    };
}());
